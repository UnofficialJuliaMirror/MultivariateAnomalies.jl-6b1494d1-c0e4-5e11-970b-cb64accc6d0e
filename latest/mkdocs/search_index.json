{
    "docs": [
        {
            "location": "/", 
            "text": "MultivariateAnomalies.jl\n\n\nDecting multivariate anomalies in Julia.\n\n\nA package for detecting anomalies in multivariate data.\n\n\nKeywords: Novelty detection, Anomaly Detection, Outlier Detection, Statistical Process Control\n\n\nPlease cite this package as ...\n\n\n\n\n\n\nRequirements\n\n\n\n\nJulia \n0.4\n\n\nDistances\n, \nMultivariateStats\n\n\nlatest \nLIBSVM\n branch via: \nPkg.clone(\"https://github.com/milanflach/LIBSVM.jl.git\")\n \nPkg.checkout(\"LIBSVM\", \"mutating_versions\")\n \nPkg.build(\"LIBSVM\")\n\n\n\n\n\n\nPackage Features\n\n\n\n\nExtract the relevant features from the data  \n@contents Pages = [\"man/FeatureExtraction.md\"]\n\n\nCompute Distance, Kernel matrices and k-nearest neighbors objects  \n@contents Pages = [\"man/DistDensity.md\"]\n\n\nDetect the anomalies \n@contents Pages = [\"man/DetectionAlgorithms.md\"]\n\n\nPostprocess your anomaly scores, by computing their quantiles or ensembles \n@contents Pages = [\"man/Scores.md\"]\n\n\nCompute the area under the curve as external evaluation metric \n@contents Pages = [\"man/AUC.md\"]\n\n\n\n\n\n\nUsing the Package\n\n\nWe provide high-level convenience functions for detecting the anomalies. Namely the pair of \n\n\nP = getParameters(algorithms, training_data)\n and \ndetectAnomalies(testing_data, P)\n\n\nsets standard choices of the Parameters \nP\n and hands the parameters as well as the algorithms choice over to detect the anomalies. \n\n\nCurrently supported algorithms include Kernel Density Estimation (\nalgorithms = [\"KDE\"]\n), Recurrences (\n\"REC\"\n), k-Nearest Neighbors algorithms (\n\"KNN-Gamma\"\n, \n\"KNN-Delta\"\n), Hotelling's T^2 (\n\"T2\"\n), Support Vector Data Description (\n\"SVDD\"\n) and Kernel Null Foley Summon Transform (\n\"KNFST\"\n). With \ngetParameters()\n it is also possible to compute output scores of multiple algorithms at once (\nalgorihtms = [\"KDE\", \"T2\"]\n), quantiles of the output anomaly scores (\nquantiles = true\n) and ensembles of the selected algorithms (e.g. \nensemble_method = \"mean\"\n). For more details about the detection algorithms and their usage please consider \n\n\n@contents Pages = [\nman/DetectionAlgorithms.md\n]\n\n\n\n\n\n\nInput Data\n\n\nWithin MultivariateAnomalies we assume that observations/samples/time steps are stored along the first dimension of the data array (rows of a matrix) with the number of observations \nT = size(data, 1)\n. Variables/attributes are stored along the last dimension \nN\n of the data array (along the columns of a matrix) with the number of variables \nVAR = size(data, N)\n. We are interested in the question which observation(s) of the data are anomalous.\n\n\n\n\nIndex\n\n\n\n\nMultivariateAnomalies.EWMA\n\n\nMultivariateAnomalies.EWMA!\n\n\nMultivariateAnomalies.TDE\n\n\nMultivariateAnomalies.get_MedianCycle\n\n\nMultivariateAnomalies.get_MedianCycle!\n\n\nMultivariateAnomalies.get_MedianCycles\n\n\nMultivariateAnomalies.globalICA\n\n\nMultivariateAnomalies.globalPCA\n\n\nMultivariateAnomalies.init_MedianCycle\n\n\nMultivariateAnomalies.mw_COR\n\n\nMultivariateAnomalies.mw_VAR\n\n\nMultivariateAnomalies.sMSC\n\n\nMultivariateAnomalies.KDE\n\n\nMultivariateAnomalies.KDE!\n\n\nMultivariateAnomalies.KNFST_predict\n\n\nMultivariateAnomalies.KNFST_predict!\n\n\nMultivariateAnomalies.KNFST_train\n\n\nMultivariateAnomalies.KNN_Delta\n\n\nMultivariateAnomalies.KNN_Delta!\n\n\nMultivariateAnomalies.KNN_Gamma\n\n\nMultivariateAnomalies.KNN_Gamma!\n\n\nMultivariateAnomalies.REC\n\n\nMultivariateAnomalies.REC!\n\n\nMultivariateAnomalies.SVDD_predict\n\n\nMultivariateAnomalies.SVDD_predict!\n\n\nMultivariateAnomalies.SVDD_train\n\n\nMultivariateAnomalies.T2\n\n\nMultivariateAnomalies.T2!\n\n\nMultivariateAnomalies.UNIV\n\n\nMultivariateAnomalies.UNIV!\n\n\nMultivariateAnomalies.detectAnomalies\n\n\nMultivariateAnomalies.detectAnomalies!\n\n\nMultivariateAnomalies.getParameters\n\n\nMultivariateAnomalies.init_KDE\n\n\nMultivariateAnomalies.init_KNFST\n\n\nMultivariateAnomalies.init_KNN_Delta\n\n\nMultivariateAnomalies.init_KNN_Gamma\n\n\nMultivariateAnomalies.init_REC\n\n\nMultivariateAnomalies.init_SVDD_predict\n\n\nMultivariateAnomalies.init_T2\n\n\nMultivariateAnomalies.init_UNIV\n\n\nMultivariateAnomalies.init_detectAnomalies\n\n\nMultivariateAnomalies.compute_ensemble\n\n\nMultivariateAnomalies.get_quantile_scores\n\n\nMultivariateAnomalies.get_quantile_scores!\n\n\nMultivariateAnomalies.auc\n\n\nMultivariateAnomalies.auc_fpr_tpr\n\n\nMultivariateAnomalies.boolevents\n\n\nMultivariateAnomalies.dist_matrix\n\n\nMultivariateAnomalies.dist_matrix!\n\n\nMultivariateAnomalies.init_dist_matrix\n\n\nMultivariateAnomalies.init_knn_dists\n\n\nMultivariateAnomalies.kernel_matrix\n\n\nMultivariateAnomalies.kernel_matrix!\n\n\nMultivariateAnomalies.knn_dists\n\n\nMultivariateAnomalies.knn_dists!", 
            "title": "Home"
        }, 
        {
            "location": "/#multivariateanomaliesjl", 
            "text": "Decting multivariate anomalies in Julia.  A package for detecting anomalies in multivariate data.  Keywords: Novelty detection, Anomaly Detection, Outlier Detection, Statistical Process Control  Please cite this package as ...", 
            "title": "MultivariateAnomalies.jl"
        }, 
        {
            "location": "/#requirements", 
            "text": "Julia  0.4  Distances ,  MultivariateStats  latest  LIBSVM  branch via:  Pkg.clone(\"https://github.com/milanflach/LIBSVM.jl.git\")   Pkg.checkout(\"LIBSVM\", \"mutating_versions\")   Pkg.build(\"LIBSVM\")", 
            "title": "Requirements"
        }, 
        {
            "location": "/#package-features", 
            "text": "Extract the relevant features from the data   @contents Pages = [\"man/FeatureExtraction.md\"]  Compute Distance, Kernel matrices and k-nearest neighbors objects   @contents Pages = [\"man/DistDensity.md\"]  Detect the anomalies  @contents Pages = [\"man/DetectionAlgorithms.md\"]  Postprocess your anomaly scores, by computing their quantiles or ensembles  @contents Pages = [\"man/Scores.md\"]  Compute the area under the curve as external evaluation metric  @contents Pages = [\"man/AUC.md\"]", 
            "title": "Package Features"
        }, 
        {
            "location": "/#using-the-package", 
            "text": "We provide high-level convenience functions for detecting the anomalies. Namely the pair of   P = getParameters(algorithms, training_data)  and  detectAnomalies(testing_data, P)  sets standard choices of the Parameters  P  and hands the parameters as well as the algorithms choice over to detect the anomalies.   Currently supported algorithms include Kernel Density Estimation ( algorithms = [\"KDE\"] ), Recurrences ( \"REC\" ), k-Nearest Neighbors algorithms ( \"KNN-Gamma\" ,  \"KNN-Delta\" ), Hotelling's T^2 ( \"T2\" ), Support Vector Data Description ( \"SVDD\" ) and Kernel Null Foley Summon Transform ( \"KNFST\" ). With  getParameters()  it is also possible to compute output scores of multiple algorithms at once ( algorihtms = [\"KDE\", \"T2\"] ), quantiles of the output anomaly scores ( quantiles = true ) and ensembles of the selected algorithms (e.g.  ensemble_method = \"mean\" ). For more details about the detection algorithms and their usage please consider   @contents Pages = [ man/DetectionAlgorithms.md ]", 
            "title": "Using the Package"
        }, 
        {
            "location": "/#input-data", 
            "text": "Within MultivariateAnomalies we assume that observations/samples/time steps are stored along the first dimension of the data array (rows of a matrix) with the number of observations  T = size(data, 1) . Variables/attributes are stored along the last dimension  N  of the data array (along the columns of a matrix) with the number of variables  VAR = size(data, N) . We are interested in the question which observation(s) of the data are anomalous.", 
            "title": "Input Data"
        }, 
        {
            "location": "/#index", 
            "text": "MultivariateAnomalies.EWMA  MultivariateAnomalies.EWMA!  MultivariateAnomalies.TDE  MultivariateAnomalies.get_MedianCycle  MultivariateAnomalies.get_MedianCycle!  MultivariateAnomalies.get_MedianCycles  MultivariateAnomalies.globalICA  MultivariateAnomalies.globalPCA  MultivariateAnomalies.init_MedianCycle  MultivariateAnomalies.mw_COR  MultivariateAnomalies.mw_VAR  MultivariateAnomalies.sMSC  MultivariateAnomalies.KDE  MultivariateAnomalies.KDE!  MultivariateAnomalies.KNFST_predict  MultivariateAnomalies.KNFST_predict!  MultivariateAnomalies.KNFST_train  MultivariateAnomalies.KNN_Delta  MultivariateAnomalies.KNN_Delta!  MultivariateAnomalies.KNN_Gamma  MultivariateAnomalies.KNN_Gamma!  MultivariateAnomalies.REC  MultivariateAnomalies.REC!  MultivariateAnomalies.SVDD_predict  MultivariateAnomalies.SVDD_predict!  MultivariateAnomalies.SVDD_train  MultivariateAnomalies.T2  MultivariateAnomalies.T2!  MultivariateAnomalies.UNIV  MultivariateAnomalies.UNIV!  MultivariateAnomalies.detectAnomalies  MultivariateAnomalies.detectAnomalies!  MultivariateAnomalies.getParameters  MultivariateAnomalies.init_KDE  MultivariateAnomalies.init_KNFST  MultivariateAnomalies.init_KNN_Delta  MultivariateAnomalies.init_KNN_Gamma  MultivariateAnomalies.init_REC  MultivariateAnomalies.init_SVDD_predict  MultivariateAnomalies.init_T2  MultivariateAnomalies.init_UNIV  MultivariateAnomalies.init_detectAnomalies  MultivariateAnomalies.compute_ensemble  MultivariateAnomalies.get_quantile_scores  MultivariateAnomalies.get_quantile_scores!  MultivariateAnomalies.auc  MultivariateAnomalies.auc_fpr_tpr  MultivariateAnomalies.boolevents  MultivariateAnomalies.dist_matrix  MultivariateAnomalies.dist_matrix!  MultivariateAnomalies.init_dist_matrix  MultivariateAnomalies.init_knn_dists  MultivariateAnomalies.kernel_matrix  MultivariateAnomalies.kernel_matrix!  MultivariateAnomalies.knn_dists  MultivariateAnomalies.knn_dists!", 
            "title": "Index"
        }
    ]
}